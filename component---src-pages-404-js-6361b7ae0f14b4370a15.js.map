{"version":3,"sources":["webpack:///./src/pages/404.js","webpack:///./.cache/public-page-renderer.js","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./src/utils/typography.js","webpack:///./src/components/layout.js","webpack:///./.cache/public-page-renderer-prod.js"],"names":["__webpack_exports__","Object","_emotion_core__WEBPACK_IMPORTED_MODULE_0__","_components_layout__WEBPACK_IMPORTED_MODULE_2__","m","module","exports","require","default","React","createContext","PropTypes","object","string","isRequired","func","__webpack_require__","d","rhythm","typography__WEBPACK_IMPORTED_MODULE_0__","typography__WEBPACK_IMPORTED_MODULE_0___default","n","typography_theme_kirkham__WEBPACK_IMPORTED_MODULE_1__","typography_theme_kirkham__WEBPACK_IMPORTED_MODULE_1___default","typography","Typography","kirkhamTheme","_ref2","children","data","_public_static_d_3892401927_json__WEBPACK_IMPORTED_MODULE_1__","react_helmet__WEBPACK_IMPORTED_MODULE_3__","charSet","name","content","rel","href","css","gatsby__WEBPACK_IMPORTED_MODULE_4__","to","site","siteMetadata","title","_ref","ProdPageRenderer","location","pageResources","loader","getResourcesForPathnameSync","pathname","createElement","InternalPageRenderer","assign","json","propTypes","shape"],"mappings":"4HAGeA,EAAA,0BACbC,OAAAC,EAAA,EAAAD,CAACE,EAAA,EAAD,KACEF,OAAAC,EAAA,EAAAD,CAAA,WACEA,OAAAC,EAAA,EAAAD,CAAA,0CACAA,OAAAC,EAAA,EAAAD,CAAA,0FCPN,IAAsBG,EAKpBC,EAAOC,SALaF,EAKWG,EAAQ,OALRH,EAAEI,SAAYJ,uICYpBK,IAAMC,cAAc,IA0CvCC,IAAUC,OACTD,IAAUE,OAAOC,WAChBH,IAAUI,KACRJ,IAAUI,uCCzDtBC,EAAAC,EAAAjB,EAAA,sBAAAkB,IAAA,IAAAC,EAAAH,EAAA,KAAAI,EAAAJ,EAAAK,EAAAF,GAAAG,EAAAN,EAAA,KAAAO,EAAAP,EAAAK,EAAAC,GAGME,EAAa,IAAIC,IAAWC,KAGrBR,EAASM,EAAWN,wICClBlB,EAAA,WAAA2B,GAAkB,IAAfC,EAAeD,EAAfC,SACVC,EAAOC,EAAAD,KAWb,OACE5B,OAAAC,EAAA,EAAAD,CAAA,WACEA,OAAAC,EAAA,EAAAD,CAAC8B,EAAA,OAAD,KACE9B,OAAAC,EAAA,EAAAD,CAAA,QAAM+B,QAAQ,UACd/B,OAAAC,EAAA,EAAAD,CAAA,QAAMgC,KAAK,cAAcC,QAAQ,iDACjCjC,OAAAC,EAAA,EAAAD,CAAA,kCAEAA,OAAAC,EAAA,EAAAD,CAAA,QAAMkC,IAAI,YAAYC,KAAK,MAE7BnC,OAAAC,EAAA,EAAAD,CAAA,OACEoC,IAAKA,YAAF,yCAGUnB,YAAO,GAHjB,gBAIcA,YAAO,KAJrB,MAOHjB,OAAAC,EAAA,EAAAD,CAACqC,EAAA,EAAD,CAAMC,GAAE,KACNtC,OAAAC,EAAA,EAAAD,CAAA,MACEoC,IAAKA,YAAF,iBACgBnB,YAAO,GADvB,6CAMFW,EAAKW,KAAKC,aAAaC,QAG5BzC,OAAAC,EAAA,EAAAD,CAACqC,EAAA,EAAD,CACEC,GAAE,UACFF,IAAGM,GAFL,SAQCf,4LCjDHgB,EAAmB,SAAAD,GAAkB,IAAfE,EAAeF,EAAfE,SACpBC,EAAgBC,UAAOC,4BAA4BH,EAASI,UAClE,OAAKH,EAIErC,IAAMyC,cAAcC,IAApBlD,OAAAmD,OAAA,CACLP,WACAC,iBACGA,EAAcO,OANV,MAUXT,EAAiBU,UAAY,CAC3BT,SAAUlC,IAAU4C,MAAM,CACxBN,SAAUtC,IAAUE,OAAOC,aAC1BA,YAGU8B","file":"component---src-pages-404-js-6361b7ae0f14b4370a15.js","sourcesContent":["import React from \"react\"\nimport Layout from \"../components/layout\"\n\nexport default () => (\n  <Layout>\n    <div>\n      <h1>Hmm... can't find that page!</h1>\n      <p>Looks like you tried to go to a page that's not here.</p>\n    </div>\n  </Layout>\n)\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\n\nconst StaticQueryContext = React.createContext({})\n\nconst StaticQuery = props => (\n  <StaticQueryContext.Consumer>\n    {staticQueryData => {\n      if (\n        props.data ||\n        (staticQueryData[props.query] && staticQueryData[props.query].data)\n      ) {\n        return (props.render || props.children)(\n          props.data ? props.data.data : staticQueryData[props.query].data\n        )\n      } else {\n        return <div>Loading (StaticQuery)</div>\n      }\n    }}\n  </StaticQueryContext.Consumer>\n)\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away,. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n.` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n}\n","import Typography from \"typography\"\nimport kirkhamTheme from \"typography-theme-kirkham\"\n\nconst typography = new Typography(kirkhamTheme)\n\nexport default typography\nexport const rhythm = typography.rhythm\n","import React from \"react\"\nimport { Helmet } from \"react-helmet\"\nimport { css } from \"@emotion/core\"\nimport { useStaticQuery, Link, graphql } from \"gatsby\"\n\nimport { rhythm } from \"../utils/typography\"\n\nexport default ({ children }) => {\n  const data = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n          }\n        }\n      }\n    `\n  )\n  return (\n    <div>\n      <Helmet>\n        <meta charSet=\"utf-8\" />\n        <meta name=\"Description\" content=\"This is my version of the Gatsby Panda site.\"></meta>\n        <title>A Cool Panda Site</title>\n        {/* todo: set to the git pages url */}\n        <link rel=\"canonical\" href=\"\" />\n      </Helmet>\n      <div\n        css={css`\n          margin: 0 auto;\n          max-width: 700px;\n          padding: ${rhythm(2)};\n          padding-top: ${rhythm(1.5)};\n        `}\n      >\n        <Link to={`/`}>\n          <h3\n            css={css`\n              margin-bottom: ${rhythm(2)};\n              display: inline-block;\n              font-style: normal;\n            `}\n          >\n            {data.site.siteMetadata.title}\n          </h3>\n        </Link>\n        <Link\n          to={`/about/`}\n          css={css`\n            float: right;\n          `}\n        >\n          About\n        </Link>\n        {children}\n      </div>\n    </div>\n  )\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\nimport loader from \"./loader\"\n\nconst ProdPageRenderer = ({ location }) => {\n  const pageResources = loader.getResourcesForPathnameSync(location.pathname)\n  if (!pageResources) {\n    return null\n  }\n\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n"],"sourceRoot":""}